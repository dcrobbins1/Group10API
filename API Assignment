## Documentation:
# MSBA Group 10 (Daniel Robbins, Redemeer Gawu, Jessie Lin, Thirtha Poruthikode Unnivelan)
#2. Question/Story: (What are you trying to show and why?)
The goal of this analysis is to compare the stock performance of the “MAAG” group (Meta, Apple, Amazon, and Google) over the past year. These companies are some of the most influential tech giants in the market, and plotting their adjusted closing prices provides insight into how each company has moved individually as well as relative to one another. This helps show whether the group moves together as part of the broader tech sector trend or whether some companies have diverged in their performance.
#3. Data Choices: (Which tickers/series and time span, and why?)
The tickers we chose were "META", "AAPL", "AMZN", and "GOOG". We chose these tickers because they are widely regarded as leaders in the technology sector as well as drivers of the overall stock market. The time span we chose was one full year, from 9/3/2024 to 9/3/2025, because a one-year time horizon is long enough to capture meaningful stock movements, while still being recent and relevant.
#4. Takeaway ((2–3 sentences): What should a reader notice?(-from normal rates to extreme percent change, continued to change a lot over the rest of the year) - Redeemer Gawu


# pip install yfinance matplotlib

import matplotlib.pyplot as plt
import yfinance as yf
from datetime import datetime

tickers = ["META", "AAPL", "AMZN", "GOOGL"]
start = "2020-01-01"
end_exclusive = datetime.fromisoformat("2021-01-01")  # inclusive through 2025-09-03

# Download and prep data
data = yf.download(tickers=tickers, start=start, end=end_exclusive, auto_adjust=True, progress=False)
closes = data["Close"][tickers].dropna(how="all")

# Aggregate % day-over-day change
agg_pct = closes.sum(axis=1).pct_change() * 100

# Plot
fig, ax = plt.subplots(figsize=(12, 6))
for t in tickers:
    ax.plot(closes.index, closes[t], label=t)

ax.set_xlabel("Date")
ax.set_ylabel("Daily Closing Price (USD)")
ax.set_title("MAAG Stock Prices & Aggregate Percentage Change")
ax.grid(True, alpha=0.3)

ax_r = ax.twinx()
agg_line, = ax_r.plot(agg_pct.index, agg_pct, color="grey", linestyle="-", linewidth=2, label="Aggregate % Change")
ax_r.set_ylabel("Aggregate Percentage of Change (%)")
ax_r.set_ylim(0, 25)

handles = ax.get_lines() + [agg_line]
labels = [h.get_label() for h in handles]
ax.legend(handles, labels, loc="upper left", frameon=True)

plt.tight_layout()
plt.show()



